@model SATTP.DATA.EF.Models.Student

@{
    //update the edit to display the name of the student (back to our metadata for FullName)
    ViewBag.Title = "Edit " + Model.FullName;
    string photo = string.IsNullOrEmpty(Model.PhotoUrl) ? "noImage.jpg" : Model.PhotoUrl;

}
@*
    all info regarding bootstrap formatting has been removed and has
    been replaced with custom code to present the Edit in the same way
    as the Details view.
    some classes may still exist on form controls for formatting.

    ***** DO NOT REMOVE the AntiForgeryToken() or the HiddenFor(id) *****
*@

<h2>@ViewBag.Title</h2>

<!-- File Upload Steps
    1) update the BeginForm()
    1a) for Edit ONLY - add a HiddenFor() for the image property
    2) add an input type of file to the form (below)
    3) code the POST action (Controller)
    BeginForm() values: action, Controller, HttpRequest (Get/Post) -->

@using (Html.BeginForm("Edit", "Students", FormMethod.Post,
    @* define the encoding type; allows for the form data AND the file to be sent *@
    new { @enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.StudentId)

    @* for edits ONLY -- add a HiddenFor() for the image property *@
    @Html.HiddenFor(model => model.PhotoUrl) //if a new image is not provided, maintain the current image

    /* all formatted divs were brought in from Details */
    <div id="studentContainer">
        <div id="studentHeader">
            <h2>
                
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" }):
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })

                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" }):
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </h2>
        </div>
        <div id="studentLeft">
            @* display the current photo (Create/Edit/Details will all look similar) *@
            <p>
                <strong>Existing Photo:</strong><br />
                <img src="~/images/StudentImages/@photo" alt="@Model.FullName" />
            </p>
            <br /><br />
            <strong>New Photo:</strong><input type="file" name="studentPhoto" />@* file upload, name must match action param (Controller) *@
            <p>
                <strong>
                    @Html.LabelFor(model => model.Major, htmlAttributes: new { @class = "control-label" }):
                </strong>
                @Html.EditorFor(model => model.Major, new { htmlAttributes = new { @class = "form-control", @style = "max-width:75%;" } })
                @Html.ValidationMessageFor(model => model.Major, "", new { @class = "text-danger" })
            </p>
            <!-- override default styles -->
            <p style="margin-top:.5em;">
                <!--manually update label text (string)-->
                <strong>@Html.LabelFor(model => model.SSID, "Status", htmlAttributes: new { @class = "control-label" }):</strong>
                @Html.DropDownList("SSID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SSID, "", new { @class = "text-danger" })
            </p>
        </div>
        <div id="studentRight">
            <fieldset>
                <legend>Address Information</legend>
                <p>
                    <!-- use placeholders where appropriate -->
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </p>

                <p>
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @placeholder = "City" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </p>

                <p>
                    <!-- override style (if necessary) -->
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", @placeholder = "ST", @style = "width:50px;" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </p>

                <p>
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", @placeholder = "Zip Code" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </p>
            </fieldset>

            <fieldset class="second">
                <legend>Other Contact</legend>

                <p>
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @placeholder = "Phone Number" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </p>
                <p>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email Address" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </p>
            </fieldset>
        </div>
        <div class="clear"></div>
        <div id="studentFooterLeft">
            @* change values on buttons and hyperlinks to personalize *@
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger" })
        </div>
        <div id="studentFooterRight">
            @* change values on buttons and hyperlinks to personalize *@
            <input type="submit" value="Update Student" class="btn btn-primary" />
        </div>
        <div class="clear"></div>
    </div>
}

@* remember to include a section Scripts for validation *@
@section Scripts {
    @* @Scripts.Render("~/bundles/jqueryval") *@
}

@{
    //reference only
    #region original form elements (default groups)
    /*
@Html.AntiForgeryToken()
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.StudentId)


@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.Major, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.Major, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.Major, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.PhotoUrl, htmlAttributes: new { @class = "control-label col-md-2" })
@Html.EditorFor(model => model.PhotoUrl, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.PhotoUrl, "", new { @class = "text-danger" })

@Html.LabelFor(model => model.SSID, "SSID", htmlAttributes: new { @class = "control-label col-md-2" })
@Html.DropDownList("SSID", null, htmlAttributes: new { @class = "form-control" })
@Html.ValidationMessageFor(model => model.SSID, "", new { @class = "text-danger" })
    */
    #endregion

    #region default bootstrap
    /*
<div class="form-horizontal">
    <h4>Student</h4>
    <hr />

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>

@* back to list (outside form scope) *@
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

    */
    #endregion
}